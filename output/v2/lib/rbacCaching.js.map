{"version":3,"sources":["../../../src/v2/lib/rbacCaching.js"],"names":["kubeToken","undefined","kubeConnector","isTest","KubeConnector","token","MockKubeConnector","roles","roleBindings","clusterRoles","clusterRoleBindings","Promise","all","get","items","getClusterRbacConfig","url","res","resources","selfReview","filter","r","kind","logger","debug","length","isOpenshift","checkIfOpenShiftPlatform","startTime","Date","now","push","post","then","apiGroups","groups","map","group","preferredVersion","groupVersion","results","mappedResources","result","groupResources","_","nonNamespaced","resource","namespaced","name","item","apiGroup","flatten","perfLog","getNonNamespacedResources","nonNamespacedResources","jsonBody","apiVersion","spec","resourceAttributes","verb","status","allowed","getNonNamespacedAccess","namespace","userResources","rules","resourceRules","forEach","verbs","includes","concat","ns","indexOf","getUserAccess","req","objAliases","user","namespaces","idToken","userCache","cache","data","userAccessPromise","userNonNamespacedAccessPromise","set","info","rbacData","Set","flattenDeep","aliasesData","alias","aliasesStrings","a","join","buildRbacString","rbacFilter","activeUsers","currentUser","currentUserCache","getUserRbacFilter","pollUserAccess","config","adminAccessToken","max","maxAge","end","Object","entries","active","del","roleAccessCache","process","env","NODE_ENV","fs","readFileSync","SERVICEACCT_TOKEN","rolesCache","clusterRolesCache","roleBindingsCache","clusteroleBindingsCache","JSON","stringify","reset","run"],"mappings":"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","file":"rbacCaching.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n/* eslint-disable max-len */\nimport _ from 'lodash';\nimport fs from 'fs';\nimport lru from 'lru-cache';\nimport asyncPolling from 'async-polling';\nimport config from '../../../config';\nimport logger from '../lib/logger';\nimport KubeConnector from '../connectors/kube';\n// Mocked connectors for testing\nimport MockKubeConnector from '../mocks/kube';\n\nlet isOpenshift = null;\nconst isTest = config.get('NODE_ENV') === 'test';\nlet activeUsers = [];\nlet adminAccessToken;\nconst cache = lru({\n  max: 1000,\n  maxAge: config.get('RBAC_INACTIVITY_TIMEOUT'), // default is 10 mins\n});\n\nexport async function getClusterRbacConfig(kubeToken) {\n  if (kubeToken !== undefined) {\n    const kubeConnector = !isTest\n      ? new KubeConnector({ token: `${kubeToken}` })\n      : new MockKubeConnector();\n    // eslint-disable-next-line prefer-const\n    let [roles, roleBindings, clusterRoles, clusterRoleBindings] = await Promise.all([\n      kubeConnector.get('/apis/rbac.authorization.k8s.io/v1/roles'),\n      kubeConnector.get('/apis/rbac.authorization.k8s.io/v1/rolebindings'),\n      kubeConnector.get('/apis/rbac.authorization.k8s.io/v1/clusterroles'),\n      kubeConnector.get('/apis/rbac.authorization.k8s.io/v1/clusterrolebindings'),\n    ]);\n    // Get just the items, whole response contians resourceVersion whichs changes everytime\n    // check if we can just do resourceVersion\n    roles = roles && roles.items;\n    roleBindings = roleBindings && roleBindings.items;\n    clusterRoles = clusterRoles && clusterRoles.items;\n    clusterRoleBindings = clusterRoleBindings && clusterRoleBindings.items;\n    return {\n      roles,\n      roleBindings,\n      clusterRoles,\n      clusterRoleBindings,\n    };\n  }\n  return {};\n}\n\nasync function checkIfOpenShiftPlatform(kubeToken) {\n  const url = '/apis/authorization.openshift.io/v1';\n  const kubeConnector = !isTest\n    ? new KubeConnector({ token: `${kubeToken}` })\n    : new MockKubeConnector();\n  const res = await kubeConnector.get(url);\n\n  if (res && res.resources) {\n    const selfReview = res.resources.filter(r => r.kind === 'SelfSubjectRulesReview');\n    logger.debug('SelfSubjectRulesReview:', selfReview);\n    if (selfReview.length > 0) {\n      logger.debug('Found API \"authorization.openshift.io/v1\" so assuming that we are running in OpenShift');\n      isOpenshift = true;\n      return;\n    }\n  }\n  isOpenshift = false;\n}\n\nasync function getNonNamespacedResources(kubeToken) {\n  const startTime = Date.now();\n  const resources = [];\n  const kubeConnector = !isTest\n    ? new KubeConnector({ token: `${kubeToken}` })\n    : new MockKubeConnector();\n\n  // Get non-namespaced resources WITH an api group\n  resources.push(kubeConnector.post('/apis', {}).then(async (res) => {\n    if (res) {\n      const apiGroups = res.groups.map(group => group.preferredVersion.groupVersion);\n      const results = await Promise.all(apiGroups.map((group) => {\n        const mappedResources = kubeConnector.get(`/apis/${group}`).then((result) => {\n          const groupResources = _.get(result, 'resources', []);\n          const nonNamespaced = groupResources.filter(resource => resource.namespaced === false)\n            .map(resource => resource.name);\n          return nonNamespaced.filter(item => item.length > 0)\n            .map(item => ({ name: item, apiGroup: group }));\n        });\n        return mappedResources;\n      }));\n      return _.flatten(results.filter(item => item.length > 0));\n    }\n    return 'Error getting available apis.';\n  }));\n\n  // Get non-namespaced resources WITHOUT an api group\n  resources.push(kubeConnector.get('/api/v1').then((res) => {\n    if (res) {\n      return res.resources.filter(resource => resource.namespaced === false)\n        .map(item => ({ name: item.name, apiGroup: 'null' }));\n    }\n    return 'Error getting available apis.';\n  }));\n  logger.perfLog(startTime, 500, 'getNonNamespacedResources()');\n  return _.flatten(resources);\n}\n\nasync function getNonNamespacedAccess(kubeToken) {\n  const startTime = Date.now();\n  const kubeConnector = !isTest\n    ? new KubeConnector({ token: `${kubeToken}` })\n    : new MockKubeConnector();\n  const nonNamespacedResources = await getNonNamespacedResources(kubeToken);\n  const results = await Promise.all(nonNamespacedResources.map((resource) => {\n    const jsonBody = {\n      apiVersion: 'authorization.k8s.io/v1',\n      kind: 'SelfSubjectAccessReview',\n      spec: {\n        resourceAttributes: {\n          verb: 'get',\n          resource: resource.name,\n        },\n      },\n    };\n    return kubeConnector.post('/apis/authorization.k8s.io/v1/selfsubjectaccessreviews', jsonBody).then((res) => {\n      if (res && res.status && res.status.allowed) {\n        return `'null_${resource.apiGroup}_${resource.name}'`;\n      }\n      return null;\n    });\n  }));\n  logger.perfLog(startTime, 500, 'getNonNamespacedAccess()');\n  return results.filter(r => r !== null);\n}\n\nasync function getUserAccess(kubeToken, namespace) {\n  const kubeConnector = !isTest\n    ? new KubeConnector({ token: `${kubeToken}` })\n    : new MockKubeConnector();\n  const url = `/apis/authorization.${!isOpenshift ? 'k8s' : 'openshift'}.io/v1/${!isOpenshift ? '' : `namespaces/${namespace}/`}selfsubjectrulesreviews`;\n  const jsonBody = {\n    apiVersion: `authorization.${!isOpenshift ? 'k8s' : 'openshift'}.io/v1`,\n    kind: 'SelfSubjectRulesReview',\n    spec: {\n      namespace,\n    },\n  };\n  return kubeConnector.post(url, jsonBody).then((res) => {\n    let userResources = [];\n    if (res && res.status) {\n      const results = isOpenshift ? res.status.rules : res.status.resourceRules;\n      results.forEach((item) => {\n        if (item.verbs.includes('*') && item.resources.includes('*')) {\n          // if user has access to everything then add just an *\n          userResources = userResources.concat(['*']);\n        } else if (item.verbs.includes('get') && item.resources.length > 0) { // TODO need to include access for 'patch' and 'delete'\n          // RBAC string is defined as \"namespace_apigroup_kind\"\n          const resources = [];\n          const ns = (namespace === '' || namespace === undefined) ? 'null_' : `${namespace}_`;\n          const apiGroup = (item.apiGroups[0] === '' || item.apiGroups[0] === undefined) ? 'null_' : `${item.apiGroups[0]}_`;\n          // Filter sub-resources, those contain '/'\n          item.resources.filter(r => r.indexOf('/') === -1).forEach((resource) => {\n            resources.push(`'${ns + apiGroup + resource}'`);\n          });\n          userResources = userResources.concat(resources);\n        }\n        return null;\n      });\n    }\n    userResources.push(`'${namespace}_null_releases'`);\n    return userResources.filter(r => r !== null);\n  });\n}\n\nasync function buildRbacString(req, objAliases) {\n  const { user: { namespaces, idToken } } = req;\n  const startTime = Date.now();\n  if (isOpenshift === null) await checkIfOpenShiftPlatform(idToken);\n  const userCache = cache.get(idToken);\n  let data = [];\n  if (!userCache || !userCache.userAccessPromise || !userCache.userNonNamespacedAccessPromise) {\n    const userAccessPromise = Promise.all(namespaces.map(namespace => getUserAccess(idToken, namespace)));\n    const userNonNamespacedAccessPromise = getNonNamespacedAccess(idToken);\n    cache.set(idToken, { ...userCache, userAccessPromise, userNonNamespacedAccessPromise });\n    logger.info('Saved userAccess and nonNamespacesAccess promises to user cache.');\n    data = [await userAccessPromise, await userNonNamespacedAccessPromise];\n  } else {\n    data = [await userCache.userAccessPromise, await userCache.userNonNamespacedAccessPromise];\n  }\n\n  const rbacData = new Set(_.flattenDeep(data));\n  const aliasesData = objAliases.map(alias => [...rbacData].map(item => `${alias}._rbac = ${item}`));\n  const aliasesStrings = aliasesData.map(a => a.join(' OR '));\n\n  logger.perfLog(startTime, 1000, `buildRbacString(namespaces count:${namespaces && namespaces.length} )`);\n  return `(${aliasesStrings.join(') AND (')})`;\n}\n\nexport async function getUserRbacFilter(req, objAliases) {\n  let rbacFilter = null;\n  // update/add user on active list\n  activeUsers[req.user.name] = Date.now();\n  const currentUser = cache.get(req.user.idToken);\n  // 1. if user exists -> return the cached RBAC string\n  if (currentUser) {\n    rbacFilter = await buildRbacString(req, objAliases);\n  }\n  // 2. if (users 1st time querying || they have been removed b/c inactivity || they otherwise dont have an rbacString) -> create the RBAC String\n  if (!rbacFilter) {\n    const currentUserCache = cache.get(req.user.idToken); // Get user cache again because it may have changed.\n    cache.set(req.user.idToken, { ...currentUserCache });\n    rbacFilter = buildRbacString(req, objAliases);\n    return rbacFilter;\n  }\n  return rbacFilter;\n}\n\n// Poll users access every 1 mins(default) in the background to determine RBAC revalidation\nexport default function pollUserAccess() {\n  asyncPolling(async (end) => {\n    if (config.get('NODE_ENV') !== 'test') {\n      const startTime = Date.now();\n      logger.debug('Polling - Revalidating user access to determine if rbac needs to be updated');\n      // filter out inactive users and remove them from cache\n      Object.entries(activeUsers).forEach((user) => {\n        const active = Date.now() - user[1] < config.get('RBAC_INACTIVITY_TIMEOUT');\n        if (!active) {\n          logger.info('User is no longer active, removing from cache');\n          delete activeUsers[user[0]];\n          cache.del(user[0]);\n        }\n      });\n      // If role/roleBinding/clusterRole/clusterRoleBinding resources changed -> need to delete all active user RBAC cache\n      const roleAccessCache = cache.get('user-role-access-data');\n      // Need to use admin token to retrieve role data as admin has access to all data.\n      if (!adminAccessToken) {\n        adminAccessToken = process.env.NODE_ENV === 'production'\n          ? fs.readFileSync('/var/run/secrets/kubernetes.io/serviceaccount/token', 'utf8')\n          : process.env.SERVICEACCT_TOKEN || '';\n      }\n      getClusterRbacConfig(adminAccessToken).then((res) => {\n        // If we dont have this cached we need to set it\n        if (!roleAccessCache) {\n          cache.set('user-role-access-data', res);\n        } else { // Otherwise re-validate access\n          const rolesCache = _.get(roleAccessCache, 'roles', '');\n          const clusterRolesCache = _.get(roleAccessCache, 'clusterRoles', '');\n          const roleBindingsCache = _.get(roleAccessCache, 'roleBindings', '');\n          const clusteroleBindingsCache = _.get(roleAccessCache, 'clusterRoleBindings', '');\n          if (JSON.stringify(res.roles) !== JSON.stringify(rolesCache)\n            || JSON.stringify(res.clusterRoles) !== JSON.stringify(clusterRolesCache)\n            || JSON.stringify(res.roleBindings) !== JSON.stringify(roleBindingsCache)\n            || JSON.stringify(res.clusterRoleBindings) !== JSON.stringify(clusteroleBindingsCache)) {\n            // Delete the entire cache & remove all active users\n            cache.reset();\n            activeUsers = [];\n            // re-initialize the access cache with new data\n            cache.set('user-role-access-data', res);\n            logger.info('Role configuration has changed. User RBAC cache has been deleted');\n          }\n        }\n      });\n      logger.perfLog(startTime, 300, 'asyncPolling()');\n    }\n    // Notify polling when your job is done\n    end();\n    // Schedule the next call (ms)\n  }, config.get('RBAC_POLL_INTERVAL')).run(); // default 1 mins (60000ms)\n}\n"]}