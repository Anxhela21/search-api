{"version":3,"sources":["../../../src/v2/connectors/redisGraph.js"],"names":["getOperator","getDateFilter","getFilterString","formatResult","results","removePrefix","startTime","Date","now","resultList","hasNext","resultItem","record","next","keys","forEach","key","get","substr","indexOf","push","logger","perfLog","length","isNumber","value","Number","isNaN","isDate","isValid","isDateFilter","match","operator","currentTime","toISOString","filters","filterStrings","filter","values","map","operatorRemoved","replace","property","join","resultString","redisClient","getRedisClient","Promise","resolve","info","config","warn","redis","createClient","password","redisUrl","redisInfo","split","redisHost","redisPort","redisCert","fs","readFileSync","process","env","auth_pass","tls","servername","ca","ping","error","result","on","msg","NODE_ENV","RedisGraphConnector","constructor","rbac","req","isServiceAvailable","g","undefined","RedisGraph","connected","ready","getRbacString","objAliases","rbacFilter","includes","createWhereClause","aliases","filterString","executeQuery","query","runApplicationsQuery","whereClause","runAppClustersQuery","runAppHubSubscriptionsQuery","runAppPodsCountQuery","runAppRemoteSubscriptionsQuery","runGlobalAppClusterCountQuery","runGlobalAppChannelsQuery","runGlobalAppHubSubscriptionsQuery","runGlobalAppRemoteSubscriptionsQuery","runSearchQuery","limit","querySkipIdx","labelFilter","find","f","item","label","limitClause","runSearchQueryCountOnly","then","r","getAllProperties","_header","charAt","getAllValues","valuesList","_results","labels","res","sort","a","b","parseInt","findRelationships","countOnly","relatedKinds","inQuery","outQuery","relatedClause","kind","inFormatted","outFormatted","all","outItem","_uid"],"mappings":"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","file":"redisGraph.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable max-len */\nimport fs from 'fs';\nimport redis from 'redis';\nimport { RedisGraph } from 'redisgraph.js';\nimport moment from 'moment';\nimport config from '../../../config';\nimport logger from '../lib/logger';\nimport { isRequired } from '../lib/utils';\nimport pollRbacCache, { getUserRbacFilter } from '../lib/rbacCaching';\n\n// FIXME: Is there a more efficient way?\nfunction formatResult(results, removePrefix = true) {\n  const startTime = Date.now();\n  const resultList = [];\n  while (results.hasNext()) {\n    const resultItem = {};\n    const record = results.next();\n    record.keys().forEach((key) => {\n      if (record.get(key) !== null) {\n        if (removePrefix) {\n          resultItem[key.substr(key.indexOf('.') + 1)] = record.get(key);\n        } else {\n          resultItem[key] = record.get(key);\n        }\n      }\n    });\n    resultList.push(resultItem);\n  }\n  logger.perfLog(startTime, 100, 'formatResult()', `Result set size: ${resultList.length}`);\n  return resultList;\n}\n\nconst isNumber = value => !Number.isNaN(value * 1);\n// TODO: Zack L - Need to come back to this once number values with units are normalized\n// const isNumWithChars = (value) => {\n//   if (!isNumber(value) && !Number.isNaN(parseInt(value, 10))) {\n// eslint-disable-next-line\n//     return ['Ei', 'Pi', 'Ti', 'Gi', 'Mi', 'Ki'].findIndex(unit => unit === value.substring(value.length - 2, value.length)) > -1;\n//   }\n//   return false;\n// };\nconst isDate = value => !isNumber(value) && moment(value, 'YYYY-MM-DDTHH:mm:ssZ', true).isValid();\nconst isDateFilter = value => ['hour', 'day', 'week', 'month', 'year'].indexOf(value) > -1;\n// const isVersion = property.toLowerCase().includes('version');\n\nexport function getOperator(value) {\n  const match = value.match(/^<=|^>=|^!=|^!|^<|^>|^=]/);\n  let operator = (match && match[0]) || '=';\n  if (operator === '!') {\n    operator = '!=';\n  }\n  return operator;\n}\n\nexport function getDateFilter(value) {\n  const currentTime = Date.now();\n  switch (true) {\n    case value === 'hour':\n      return `> '${new Date(currentTime - 3600000).toISOString()}'`;\n    case value === 'day':\n      return `> '${new Date(currentTime - 86400000).toISOString()}'`;\n    case value === 'week':\n      return `> '${new Date(currentTime - 604800000).toISOString()}'`;\n    case value === 'month':\n      return `> '${new Date(currentTime - 2629743000).toISOString()}'`;\n    case value === 'year':\n      return `> '${new Date(currentTime - 31556926000).toISOString()}'`;\n    default:\n      // default to month\n      return `> '${new Date(currentTime - 2629743000).toISOString()}'`;\n  }\n}\n\nexport function getFilterString(filters) {\n  const filterStrings = [];\n  filters.forEach((filter) => {\n    // Use OR for filters with multiple values.\n    filterStrings.push(`(${filter.values.map((value) => {\n      const operatorRemoved = value.replace(/^<=|^>=|^!=|^!|^<|^>|^=/, '');\n      if (isNumber(operatorRemoved)) { //  || isNumWithChars(operatorRemoved)\n        return `n.${filter.property} ${getOperator(value)} ${operatorRemoved}`;\n      } else if (isDateFilter(value)) {\n        return `n.${filter.property} ${getDateFilter(value)}`;\n      }\n      return `n.${filter.property} ${getOperator(value)} '${operatorRemoved}'`;\n    }).join(' OR ')})`);\n  });\n  const resultString = filterStrings.join(' AND ');\n  return resultString;\n}\n\nlet redisClient;\nfunction getRedisClient() {\n  return new Promise((resolve) => {\n    if (redisClient) {\n      resolve(redisClient);\n      return;\n    }\n\n    logger.info('Initializing new Redis client.');\n\n    if (config.get('redisPassword') === '') {\n      logger.warn('Starting redis client without authentication. redisPassword was not provided in config.');\n      redisClient = redis.createClient(config.get('redisEndpoint'));\n    } else if (config.get('redisSSLEndpoint') === '') {\n      logger.info('Starting Redis client using endpoint: ', config.get('redisEndpoint'));\n      redisClient = redis.createClient(config.get('redisEndpoint'), { password: config.get('redisPassword') });\n    } else {\n      logger.info('Starting Redis client using SSL endpoint: ', config.get('redisSSLEndpoint'));\n      const redisUrl = config.get('redisSSLEndpoint');\n      const redisInfo = redisUrl.split(':');\n      const redisHost = redisInfo[0];\n      const redisPort = redisInfo[1];\n      const redisCert = fs.readFileSync(process.env.redisCert || './rediscert/redis.crt', 'utf8');\n      redisClient = redis.createClient(redisPort, redisHost, { auth_pass: config.get('redisPassword'), tls: { servername: redisHost, ca: [redisCert] } });\n      redisClient.ping((error, result) => {\n        if (error) logger.error('Error with Redis SSL connection: ', error);\n        else {\n          logger.info('Redis SSL connection respone : ', result);\n          if (result === 'PONG') {\n            resolve(redisClient);\n          }\n        }\n      });\n    }\n\n\n    // Wait until the client connects and is ready to resolve with the connecction.\n    redisClient.on('connect', () => {\n      logger.info('Redis Client connected.');\n    });\n    redisClient.on('ready', () => {\n      logger.info('Redis Client ready.');\n      resolve(redisClient);\n    });\n\n    // Log redis connection events.\n    redisClient.on('error', (error) => {\n      logger.info('Error with Redis connection: ', error);\n    });\n    redisClient.on('end', (msg) => {\n      logger.info('The Redis connection has ended.', msg);\n    });\n  });\n}\n\n// Skip while running tests until we can mock Redis.\nif (process.env.NODE_ENV !== 'test') {\n  // Initializes the Redis client on startup.\n  getRedisClient();\n  // Check if user access has changed for any logged in user - if so remove them from the cache so the rbac string is regenerated\n  pollRbacCache();\n}\n\n\nexport default class RedisGraphConnector {\n  constructor({\n    rbac = isRequired('rbac'),\n    req = isRequired('req'),\n  } = {}) {\n    this.rbac = rbac;\n    this.req = req;\n  }\n\n  async isServiceAvailable() {\n    await getRedisClient();\n    if (this.g === undefined && redisClient) {\n      this.g = new RedisGraph('icp-search', redisClient);\n    }\n    return redisClient.connected && redisClient.ready;\n  }\n\n  async getRbacString(objAliases = []) {\n    const startTime = Date.now();\n    const rbacFilter = await getUserRbacFilter(this.req, objAliases);\n    if (rbacFilter.includes(`${objAliases[0]}._rbac = *`)) {\n      logger.perfLog(startTime, 1000, 'getRbacString()');\n      return '';\n    }\n    logger.perfLog(startTime, 1000, 'getRbacString()');\n    return rbacFilter;\n  }\n\n  async createWhereClause(filters, aliases) {\n    const rbac = await this.getRbacString(aliases);\n    const filterString = getFilterString(filters);\n    if (rbac !== '') {\n      if (filterString !== '') {\n        return `WHERE ${filterString} AND ${rbac}`;\n      }\n      return `WHERE ${rbac}`;\n    } else if (filterString !== '') {\n      return `WHERE ${filterString}`;\n    }\n    return '';\n  }\n\n\n  /*\n   * Execute a redis query and format the result as an array of Object.\n   */\n  async executeQuery({ query, removePrefix = true }) {\n    await this.isServiceAvailable();\n    const startTime = Date.now();\n    const result = await this.g.query(query);\n    logger.perfLog(startTime, 200, query);\n    return formatResult(result, removePrefix);\n  }\n\n\n  /*\n   * Get Applications.\n   */\n  async runApplicationsQuery() {\n    const whereClause = await this.createWhereClause([], ['app']);\n    const query = `MATCH (app:Application) ${whereClause} RETURN DISTINCT app._uid, app.name, app.namespace, app.created, app.dashboard, app.selfLink ORDER BY app.name ASC`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n\n  /*\n   * Get a list of applications that have related clusters.\n   * NOTE: If an app doesn't have resources in any cluster it won't be in the result.\n   *\n   * Sample result:\n   * [\n   *   {app._uid: 'app1', count: 3 },\n   *   {app._uid: 'app2', count: 1 },\n   * ]\n   */\n  async runAppClustersQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'cluster']);\n    const query = `MATCH (app:Application)<-[{_interCluster:true}]-(cluster:Cluster) ${whereClause} RETURN DISTINCT app._uid, count(cluster._uid) as count`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /*\n   * Get Applications with their related Hub Subscriptions.\n   */\n  async runAppHubSubscriptionsQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'sub']);\n    const query = `MATCH (app:Application)-[]->(sub:Subscription) ${whereClause === '' ? 'WHERE' : `${whereClause} AND`} exists(sub._hubClusterResource)=true RETURN app._uid, sub._uid, sub.status, sub.channel`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /*\n   * Get Applications with the pods counter\n   * return the number of pods for this app as a string, grouped by their status\n  */\n  async runAppPodsCountQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'pod']);\n    const query = `MATCH (app:Application)<-[{_interCluster:true}]-(pod:Pod) ${whereClause} RETURN app._uid, pod._uid, pod.status`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /*\n   * Get Applications with their related remote subscriptions.\n   # Remote subscriptions are those with the '_hostingSubscription' property.\n   */\n  async runAppRemoteSubscriptionsQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'sub']);\n    const query = `MATCH (app:Application)<-[{_interCluster:true}]-(sub:Subscription) ${whereClause === '' ? 'WHERE' : `(${whereClause}) AND`} exists(sub._hostingSubscription)=true RETURN app._uid, sub._uid, sub.status`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /*\n   * Get clusters related to any application.\n   */\n  async runGlobalAppClusterCountQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'cluster']);\n    const query = `MATCH (app:Application)<-[{_interCluster:true}]-(cluster:Cluster) ${whereClause} RETURN DISTINCT cluster._uid`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /*\n   * Get channels related to any application.\n   */\n  async runGlobalAppChannelsQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'ch']);\n    const query = `MATCH (app:Application)<-[]-(ch:Channel) ${whereClause} RETURN DISTINCT ch`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /*\n   * Get hub subscriptions related to any application.\n   */\n  async runGlobalAppHubSubscriptionsQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'sub']);\n    const query = `MATCH (app:Application)-[]->(sub:Subscription) ${whereClause === '' ? 'WHERE' : `${whereClause} AND`} exists(sub._hubClusterResource)=true RETURN DISTINCT sub`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /*\n   * Get remote subscriptions related to any application.\n   */\n  async runGlobalAppRemoteSubscriptionsQuery() {\n    const whereClause = await this.createWhereClause([], ['app', 'sub']);\n    const query = `MATCH (app:Application)<-[{_interCluster:true}]-(sub:Subscription) ${whereClause === '' ? 'WHERE' : `(${whereClause}) AND`} exists(sub._hostingSubscription)=true RETURN DISTINCT sub`;\n    return this.executeQuery({ query, removePrefix: false });\n  }\n\n  /**\n   * TODO: For users less than clusterAdmin we we do not currently handle non-namespaced resources\n   * For users with access to >0 namespaces we create an RBAC string for resources user has access\n   * For users with access to 0 namespaces we return an empty object\n   */\n\n  async runSearchQuery(filters, limit = config.get('defaultQueryLimit'), querySkipIdx = 0) {\n    // logger.info('runSearchQuery()', filters);\n    if (this.rbac.length > 0) {\n      // RedisGraph 1.0.15 doesn't support an array as value. To work around this limitation we\n      // encode labels in a single string. As a result we can't use an openCypher query to search\n      // for labels so we need to filter here, which btw is inefficient.\n      const labelFilter = filters.find(f => f.property === 'label');\n      if (labelFilter) {\n        const whereClause = await this.createWhereClause(filters.filter(f => f.property !== 'label'), ['n']);\n        const startTime = Date.now();\n        const query = `MATCH (n) ${whereClause} RETURN n`;\n        const result = await this.g.query(query);\n        logger.perfLog(startTime, 150, 'LabelSearchQuery');\n        return formatResult(result).filter(item =>\n          (item.label && labelFilter.values.find(value => item.label.indexOf(value) > -1)));\n      }\n      let limitClause = '';\n      if (limit > 0) {\n        limitClause = querySkipIdx > -1\n          ? `SKIP ${querySkipIdx * config.get('defaultQueryLoopLimit')} LIMIT ${config.get('defaultQueryLoopLimit')}`\n          : `LIMIT ${limit}`;\n      }\n      const whereClause = await this.createWhereClause(filters, ['n']);\n      const startTime = Date.now();\n      const query = `MATCH (n) ${whereClause} RETURN n ${limitClause}`;\n      const result = await this.g.query(query);\n      logger.perfLog(startTime, 150, 'SearchQuery');\n      return formatResult(result);\n    }\n    return [];\n  }\n\n  async runSearchQueryCountOnly(filters) {\n    // logger.info('runSearchQueryCountOnly()', filters);\n\n    if (this.rbac.length > 0) {\n      // RedisGraph 1.0.15 doesn't support an array as value. To work around this limitation we\n      // encode labels in a single string. As a result we can't use an openCypher query to search\n      // for labels so we need to filter here, which btw is inefficient.\n      const labelFilter = filters.find(f => f.property === 'label');\n      if (labelFilter) {\n        return this.runSearchQuery(filters, -1, -1).then(r => r.length);\n      }\n      const whereClause = await this.createWhereClause(filters, ['n']);\n      const startTime = Date.now();\n      const result = await this.g.query(`MATCH (n) ${whereClause} RETURN count(n)`);\n      logger.perfLog(startTime, 150, 'runSearchQueryCountOnly()');\n      if (result.hasNext() === true) {\n        return result.next().get('count(n)');\n      }\n    }\n    return 0;\n  }\n\n  async getAllProperties() {\n    // logger.info('Getting all properties');\n\n    // Adding these first to rank them higher when showin in UI.\n    const values = ['cluster', 'kind', 'label', 'name', 'namespace', 'status'];\n\n    if (this.rbac.length > 0) {\n      const whereClause = await this.createWhereClause([], ['n']);\n      const startTime = Date.now();\n      const result = await this.g.query(`MATCH (n) ${whereClause} RETURN n LIMIT 1`);\n      logger.perfLog(startTime, 150, 'getAllProperties()');\n      result._header.forEach((property) => {\n        const label = property.substr(property.indexOf('.') + 1);\n        if (label.charAt(0) !== '_' && values.indexOf(label) < 0) {\n          values.push(label);\n        }\n      });\n    }\n    return values;\n  }\n\n  async getAllValues(property, filters = [], limit = config.get('defaultQueryLimit')) {\n    // logger.info('Getting all values for property:', property, filters);\n\n    if (property === '') {\n      logger.warn('getAllValues() called with empty value. Most likely this was an unecessary API call.');\n      return Promise.resolve([]);\n    }\n\n    let valuesList = [];\n    if (this.rbac.length > 0) {\n      const startTime = Date.now();\n      const limitClause = limit <= 0 || property === 'label'\n        ? ''\n        : `LIMIT ${limit}`;\n      const result = filters.length > 0\n        ? await this.g.query(`MATCH (n) ${await this.createWhereClause(filters, ['n'])} RETURN DISTINCT n.${property} ORDER BY n.${property} ASC ${limitClause}`)\n        : await this.g.query(`MATCH (n) ${await this.createWhereClause([], ['n'])} RETURN DISTINCT n.${property} ORDER BY n.${property} ASC ${limitClause}`);\n      logger.perfLog(startTime, 500, 'getAllValues()');\n      result._results.forEach((record) => {\n        if (record.values()[0] !== 'NULL' && record.values()[0] !== null) {\n          valuesList.push(record.values()[0]);\n        }\n      });\n\n      // RedisGraph 1.0.15 doesn't support an array as value. To work around this limitation we\n      // encode labels in a single string. Here we need to decode the string to get all labels.\n      if (property === 'label') {\n        const labels = [];\n        valuesList.forEach((value) => {\n          value.split('; ').forEach((label) => {\n            // We don't want duplicates, so we check if it already exists.\n            if (labels.indexOf(label) === -1) {\n              labels.push(label);\n            }\n          });\n        });\n        return labels;\n      }\n      if (isDate(valuesList[0])) {\n        return ['isDate'];\n      } else if (isNumber(valuesList[0])) { //  || isNumWithChars(valuesList[0]))\n        valuesList = valuesList.filter(res => (isNumber(res) || (!isNumber(res))) && res !== ''); //  && isNumWithChars(res)\n        valuesList.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));\n        if (valuesList.length > 1) {\n          return ['isNumber', valuesList[0], valuesList[valuesList.length - 1]];\n        } else if (valuesList.length === 1) {\n          return ['isNumber', valuesList[0]];\n        }\n      }\n    }\n    return valuesList;\n  }\n\n  async findRelationships({ filters = [], countOnly = false, relatedKinds = [] } = {}) {\n    if (this.rbac.length > 0) {\n      // A limitation in RedisGraph 1.0.15 is that we can't query relationships without direction.\n      // To work around this limitation, we use 2 queries to get IN and OUT relationships.\n      // Then we join both results.\n\n      const whereClause = await this.createWhereClause(filters, ['n', 'r']);\n      const startTime = Date.now();\n\n      let inQuery = '';\n      let outQuery = '';\n      if (relatedKinds.length > 0) {\n        const relatedClause = relatedKinds.map(kind => `r.kind = '${kind}'`).join(' OR ');\n        inQuery = `MATCH (n)<-[]-(r) WHERE (${relatedClause}) AND ${whereClause.replace('WHERE ', '')} RETURN DISTINCT r`;\n        outQuery = `MATCH (n)-[]->(r) WHERE (${relatedClause}) AND ${whereClause.replace('WHERE ', '')} RETURN DISTINCT r`;\n      } else {\n        inQuery = `MATCH (n)<-[]-(r) ${whereClause} RETURN DISTINCT ${countOnly ? 'r._uid, r.kind' : 'r'}`;\n        outQuery = `MATCH (n)-[]->(r) ${whereClause} RETURN DISTINCT ${countOnly ? 'r._uid, r.kind' : 'r'}`;\n      }\n\n      const [inFormatted, outFormatted] = await Promise.all([formatResult(await this.g.query(inQuery)), formatResult(await this.g.query(outQuery))]);\n\n      logger.perfLog(startTime, 300, 'findRelationships()');\n\n      // Join results for IN and OUT, removing duplicates.\n      const result = inFormatted;\n      outFormatted.forEach((outItem) => {\n        // Add only if the relationship doesn't already exist.\n        if (!result.find(item => item._uid === outItem._uid)) {\n          result.push(outItem);\n        }\n      });\n\n      return result;\n    }\n    return [];\n  }\n}\n"]}