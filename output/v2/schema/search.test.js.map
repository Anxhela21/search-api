{"version":3,"sources":["../../../src/v2/schema/search.test.js"],"names":["describe","test","done","server","post","GRAPHQL_PATH","send","query","end","err","res","expect","JSON","parse","text","toMatchSnapshot"],"mappings":";;AASA;;;;AACA;;;;;;AAVA;;;;;;;;;AAYAA,SAAS,iBAAT,EAA4B,MAAM;AAChCC,OAAK,iCAAL,EAAyCC,IAAD,IAAU;AAChD,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;;;;;;;;;;;;;AADJ,KAFR,EAqBGC,GArBH,CAqBO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAxBH;AAyBD,GA1BD;AA2BAD,OAAK,yCAAL,EAAiDC,IAAD,IAAU;AACxD,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;;;;;;;;;;;AADJ,KAFR,EAmBGC,GAnBH,CAmBO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAtBH;AAuBD,GAxBD;AAyBAD,OAAK,4CAAL,EAAoDC,IAAD,IAAU;AAC3D,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;;;;;;;;;AADJ,KAFR,EAiBGC,GAjBH,CAiBO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KApBH;AAqBD,GAtBD;AAuBAD,OAAK,uCAAL,EAA+CC,IAAD,IAAU;AACtD,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;AADJ,KAFR,EASGC,GATH,CASO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAZH;AAaD,GAdD;AAeAD,OAAK,yCAAL,EAAiDC,IAAD,IAAU;AACxD,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;AADJ,KAFR,EASGC,GATH,CASO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAZH;AAaD,GAdD;AAeAD,OAAK,sDAAL,EAA8DC,IAAD,IAAU;AACrE,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;AADJ,KAFR,EASGC,GATH,CASO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAZH;AAaD,GAdD;AAeAD,OAAK,wDAAL,EAAgEC,IAAD,IAAU;AACvE,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;AADJ,KAFR,EASGC,GATH,CASO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAZH;AAaD,GAdD;AAeD,CAxID","file":"search.test.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n\nimport supertest from 'supertest';\nimport server, { GRAPHQL_PATH } from '../index';\n\ndescribe('Search Resolver', () => {\n  test('Correctly Resolves Search Query', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n          {\n            searchResult: search(input: {\n                keywords: [],\n                filters: [ { property: \"cluster\", values: [\"cluster1\"]}],\n                limit: 10000,\n                relatedKinds: [\"pod\"]}){\n              items\n              related {\n                kind\n                count\n                items\n              }\n              count\n            }\n          }\n      `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n  test('Correctly Resolves Search Keyword Query', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n          {\n            searchResult: search(input: {\n                keywords: [\"testing\"],\n                filters: []}){\n              items\n              related {\n                kind\n                count\n                items\n              }\n              count\n            }\n          }\n      `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n  test('Correctly Resolves Performant Search Query', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n          {\n            searchResult: search(input: {\n                keywords: [],\n                filters: [ { property: \"cluster\", values: [\"cluster1\"]}]}){\n              items\n              related {\n                kind\n                items\n              }\n            }\n          }\n      `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n  test('Correctly Resolves SearchSchema Query', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n          {\n            searchSchema\n          }\n        `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n  test('Correctly Resolves SearchComplete Query', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n          {\n            searchComplete(property:\"kind\", query: {keywords:[], filters:[]})\n          }\n        `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n  test('Correctly Resolves SearchComplete Query With Filters', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n          {\n            searchComplete(property:\"storage\", query: {keywords:[], filters:[{property:\"kind\", values:\"cluster\"}]})\n          }\n        `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n  test('Correctly Resolves SearchComplete Query With No Params', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n          {\n            searchComplete(property:\"kind\")\n          }\n        `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n});\n"]}