{"version":3,"sources":["../../src/v2/index.js"],"names":["GRAPHQL_PATH","config","get","GRAPHIQL_PATH","isProd","isTest","formatError","error","originalError","logger","JSON","stringify","graphQLServer","use","requestLogger","skip","req","res","statusCode","frameguard","noSniff","xssFilter","noCache","send","Date","toLocaleString","auth","info","push","inspect","app","shouldLocalAuth","endpointURL","bodyParser","json","searchConnector","kubeConnector","MockSearchConnector","MockKubeConnector","RedisGraphConnector","rbac","user","namespaces","KubeConnector","token","kubeToken","context","appModel","AppModel","searchModel","SearchModel","queryModel","QueryModel","schema"],"mappings":"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","file":"index.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n\nimport express from 'express';\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express';\nimport { isInstance as isApolloErrorInstance, formatError as formatApolloError } from 'apollo-errors';\nimport bodyParser from 'body-parser';\nimport inspect from 'security-middleware';\nimport morgan from 'morgan';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\n\nimport logger from './lib/logger';\n\nimport RedisGraphConnector from './connectors/redisGraph';\n\nimport AppModel from './models/application';\nimport SearchModel from './models/search';\nimport QueryModel from './models/userSearch';\n\nimport MockSearchConnector from './mocks/search';\nimport schema from './schema/';\nimport config from '../../config';\nimport authMiddleware from './lib/auth-middleware';\nimport MockKubeConnector from './mocks/kube';\nimport KubeConnector from './connectors/kube';\n\nexport const GRAPHQL_PATH = `${config.get('contextPath')}/graphql`;\nexport const GRAPHIQL_PATH = `${config.get('contextPath')}/graphiql`;\n\nconst isProd = config.get('NODE_ENV') === 'production';\nconst isTest = config.get('NODE_ENV') === 'test';\n\nconst formatError = (error) => {\n  const { originalError } = error;\n  if (isApolloErrorInstance(originalError)) {\n    logger.error(JSON.stringify(error.originalError, null, 2));\n  }\n  return formatApolloError(error);\n};\n\nconst graphQLServer = express();\ngraphQLServer.use(compression());\n\nconst requestLogger = isProd ?\n  morgan('combined', {\n    skip: (req, res) => res.statusCode < 400,\n  })\n  : morgan('dev');\n\ngraphQLServer.use('*', helmet({\n  frameguard: false,\n  noSniff: false,\n  xssFilter: false,\n  noCache: true,\n}), requestLogger, cookieParser());\n\ngraphQLServer.get('/livenessProbe', (req, res) => {\n  res.send(`Testing livenessProbe --> ${new Date().toLocaleString()}`);\n});\n\ngraphQLServer.get('/readinessProbe', (req, res) => {\n  res.send(`Testing readinessProbe --> ${new Date().toLocaleString()}`);\n});\n\nconst auth = [];\n\nif (isProd) {\n  logger.info('Authentication enabled');\n  auth.push(inspect.app, authMiddleware());\n} else {\n  auth.push(authMiddleware({ shouldLocalAuth: true }));\n  graphQLServer.use(GRAPHIQL_PATH, graphiqlExpress({ endpointURL: GRAPHQL_PATH }));\n}\n\nif (isTest) {\n  logger.info('Running in mock mode');\n  logger.info('Using Mocked search connector.');\n} else {\n  logger.info('Using RedisGraph search connector.');\n}\n\ngraphQLServer.use(...auth);\ngraphQLServer.use(GRAPHQL_PATH, bodyParser.json(), graphqlExpress(async (req) => {\n  let searchConnector;\n  let kubeConnector;\n  if (isTest) {\n    searchConnector = new MockSearchConnector();\n    kubeConnector = new MockKubeConnector();\n  } else {\n    searchConnector = new RedisGraphConnector({ rbac: req.user.namespaces, req });\n    kubeConnector = new KubeConnector({ token: req.kubeToken });\n  }\n\n\n  const context = {\n    req,\n    appModel: new AppModel({ searchConnector }),\n    searchModel: new SearchModel({ searchConnector }),\n    queryModel: new QueryModel({ kubeConnector }),\n  };\n\n  return { formatError, schema, context };\n}));\n\nexport default graphQLServer;\n"]}