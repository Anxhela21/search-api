{"version":3,"sources":["../../../src/v2/connectors/redisGraph.test.js"],"names":["describe","test","expect","toEqual","property","values","Date","now","jest","fn"],"mappings":";;AAUA;;2cAVA;;;;;;;;;AASA;;;AAGAA,SAAS,YAAT,EAAuB,MAAM;AAC3BA,WAAS,iBAAT,EAA4B,MAAM;AAChCC,SAAK,aAAL,oBAAoB,aAAY;AAC9BC,aAAO,6BAAY,IAAZ,CAAP,EAA0BC,OAA1B,CAAkC,IAAlC;AACAD,aAAO,6BAAY,IAAZ,CAAP,EAA0BC,OAA1B,CAAkC,IAAlC;AACAD,aAAO,6BAAY,IAAZ,CAAP,EAA0BC,OAA1B,CAAkC,IAAlC;AACAD,aAAO,6BAAY,GAAZ,CAAP,EAAyBC,OAAzB,CAAiC,GAAjC;AACAD,aAAO,6BAAY,GAAZ,CAAP,EAAyBC,OAAzB,CAAiC,GAAjC;AACD,KAND;AAOAF,SAAK,iBAAL,oBAAwB,aAAY;AAClCC,aAAO,iCAAgB,CAAC,EAAEE,UAAU,MAAZ,EAAoBC,QAAQ,CAAC,SAAD,CAA5B,EAAD,CAAhB,CAAP,EAAqEF,OAArE,CAA6E,wBAA7E;AACAD,aAAO,iCAAgB,CAAC,EAAEE,UAAU,KAAZ,EAAmBC,QAAQ,CAAC,KAAD,CAA3B,EAAD,CAAhB,CAAP,EAAgEF,OAAhE,CAAwE,cAAxE;AACD,KAHD;AAIAF,SAAK,eAAL,oBAAsB,aAAY;AAChCK,WAAKC,GAAL,GAAWC,KAAKC,EAAL,CAAQ;AAAA,eAAM,aAAN;AAAA,OAAR,CAAX,CADgC,CACS;AACzCP,aAAO,+BAAc,MAAd,CAAP,EAA8BC,OAA9B,CAAsC,gCAAtC;AACAD,aAAO,+BAAc,KAAd,CAAP,EAA6BC,OAA7B,CAAqC,gCAArC;AACAD,aAAO,+BAAc,MAAd,CAAP,EAA8BC,OAA9B,CAAsC,gCAAtC;AACAD,aAAO,+BAAc,OAAd,CAAP,EAA+BC,OAA/B,CAAuC,gCAAvC;AACAD,aAAO,+BAAc,MAAd,CAAP,EAA8BC,OAA9B,CAAsC,gCAAtC;AACD,KAPD;AAQD,GApBD;;AAsBA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACD,CApDD","file":"redisGraph.test.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n\n// import mockRedis from 'redis-mock';\nimport /* RedisGraphConnector, */ { getOperator, getDateFilter, getFilterString } from './redisGraph';\n\ndescribe('redisGraph', () => {\n  describe('Class Functions', () => {\n    test('getOperator', async () => {\n      expect(getOperator('<=')).toEqual('<=');\n      expect(getOperator('>=')).toEqual('>=');\n      expect(getOperator('!=')).toEqual('!=');\n      expect(getOperator('<')).toEqual('<');\n      expect(getOperator('>')).toEqual('>');\n    });\n    test('getFilterString', async () => {\n      expect(getFilterString([{ property: 'kind', values: ['cluster'] }])).toEqual('(n.kind = \\'cluster\\')');\n      expect(getFilterString([{ property: 'cpu', values: ['<16'] }])).toEqual('(n.cpu < 16)');\n    });\n    test('getDateFilter', async () => {\n      Date.now = jest.fn(() => 1548076708000); // 21-01-2019T13:18:28Z\n      expect(getDateFilter('hour')).toEqual('> \\'2019-01-21T12:18:28.000Z\\'');\n      expect(getDateFilter('day')).toEqual('> \\'2019-01-20T13:18:28.000Z\\'');\n      expect(getDateFilter('week')).toEqual('> \\'2019-01-14T13:18:28.000Z\\'');\n      expect(getDateFilter('month')).toEqual('> \\'2018-12-22T02:49:25.000Z\\'');\n      expect(getDateFilter('year')).toEqual('> \\'2018-01-21T07:29:42.000Z\\'');\n    });\n  });\n\n  /**\n   * createWhereClause\n   *    - getRbacString\n   *      - checkIfOpenShiftPlatform\n   *      - getUserAccess\n   *      - getNonNamespacedAccess\n   *        - getNonNamespacedResources\n   * runSearchQuery\n   * runSearchQueryCountOnly\n   * getAllProperties\n   * getAllValues\n   * findRelationships\n   */\n\n  // describe('Testing Connector Functions', () => {\n  //   const searchConnector = new RedisGraphConnector({ rbac: ['kube-system', 'default'],\n  //      req: { user: { name: 'TestUserName' }, kubeToken: 'Bearer localdev' } });\n  //   searchConnector.getRedisClient = jest.fn(() => mockRedis.createClient());\n\n  //   test('Check If Redis Is Available', async () => {\n  //     expect(await searchConnector.isServiceAvailable()).toBe(true);\n  //   });\n\n  //   test('Create the RBAC String for Redis Queries', async () => {\n  //     const RBACString =\n  //        await searchConnector.createWhereClause([{ property: 'pods', values: ['testPod'] }]);\n  //     console.log(RBACString);\n  //   });\n  // });\n});\n"]}