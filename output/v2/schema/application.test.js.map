{"version":3,"sources":["../../../src/v2/schema/application.test.js"],"names":["describe","test","done","server","post","GRAPHQL_PATH","send","query","end","err","res","expect","JSON","parse","text","toMatchSnapshot"],"mappings":";;AASA;;;;AACA;;;;;;AAVA;;;;;;;;;AAYAA,SAAS,sBAAT,EAAiC,MAAM;AACrCC,OAAK,sCAAL,EAA8CC,IAAD,IAAU;AACrD,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;;;;;;;;;;;;;;;;AADJ,KAFR,EAwBGC,GAxBH,CAwBO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KA3BH;AA4BD,GA7BD;;AA+BAD,OAAK,uCAAL,EAA+CC,IAAD,IAAU;AACtD,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;;;;;;;;;;;;;;;;AADJ,KAFR,EAwBGC,GAxBH,CAwBO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KA3BH;AA4BD,GA7BD;;AA+BAD,OAAK,wDAAL,EAAgEC,IAAD,IAAU;AACvE,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;;;;AADJ,KAFR,EAYGC,GAZH,CAYO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAfH;AAgBD,GAjBD;AAkBD,CAjFD;;AAmFAF,SAAS,6BAAT,EAAwC,MAAM;AAC5CC,OAAK,4CAAL,EAAoDC,IAAD,IAAU;AAC3D,6BAAUC,eAAV,EACGC,IADH,CACQC,mBADR,EAEGC,IAFH,CAEQ;AACJC,aAAQ;;;;;;;;;;AADJ,KAFR,EAcGC,GAdH,CAcO,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjBC,aAAOC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAP,EAA6BC,eAA7B;AACAb;AACD,KAjBH;AAkBD,GAnBD;AAoBD,CArBD","file":"application.test.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2020. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n\nimport supertest from 'supertest';\nimport server, { GRAPHQL_PATH } from '../index';\n\ndescribe('Application Resolver', () => {\n  test('Correctly Resolves Application Query', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n        {\n          applications {\n            _uid\n            clusterCount\n            created\n            dashboard\n            name\n            namespace\n            selfLink\n            podStatusCount\n            remoteSubscriptionStatusCount\n            hubSubscriptions {\n              _uid\n              status\n              channel\n            }\n          }\n        }\n      `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n\n  test('Correctly Resolves Single Application', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n        {\n          applications (namespace: \"test\", name: \"app02\") {\n            _uid\n            clusterCount\n            created\n            dashboard\n            name\n            namespace\n            selfLink\n            podStatusCount\n            remoteSubscriptionStatusCount\n            hubSubscriptions {\n              _uid\n              status\n              channel\n            }\n          }\n        }\n      `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n\n  test('Ignores filters when only name or namespace is passed.', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n        {\n          applications (name: \"app02\") {\n            _uid\n            name\n          }\n        }\n      `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n});\n\ndescribe('Global Application Resolver', () => {\n  test('Correctly Resolves Global Application Data', (done) => {\n    supertest(server)\n      .post(GRAPHQL_PATH)\n      .send({\n        query: `\n        {\n          globalAppData {\n            channelsCount\n            clusterCount\n            hubSubscriptionCount\n            remoteSubscriptionStatusCount\n          }\n        }\n      `,\n      })\n      .end((err, res) => {\n        expect(JSON.parse(res.text)).toMatchSnapshot();\n        done();\n      });\n  });\n});\n"]}