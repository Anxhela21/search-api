{"version":3,"sources":["../../../src/v2/models/search.js"],"names":["sanitizeString","s","replace","sanitizeInputs","keywords","filters","property","limit","relatedKinds","sanitizedKeywords","map","k","sanitizedFilters","f","values","v","config","get","filterByKeywords","resultSet","regex","RegExp","reduce","prev","curr","filter","r","Object","toString","match","SearchModel","constructor","searchConnector","checkSearchServiceAvailable","isServiceAvailable","logger","error","Error","searchQueryLimiter","exitLoop","querySkipIdx","results","searchResults","runSearchQuery","filteredResults","length","_","unionBy","resolveSearch","input","resolveSearchCount","runSearchQueryCountOnly","resolveSearchComplete","getAllValues","resolveRelated","countOnly","relationships","findRelationships","result","forEach","kind","push","resultKinds","keys","prioritizedRelationships","sort","a","b","indexOf","count","items","searchSchema","allProperties","getAllProperties"],"mappings":";;;;;;AASA;;;;AACA;;;;AACA;;AACA;;;;;;2cAZA;;;;;;;;;AAcA;AACA;AACA,SAASA,cAAT,CAAwBC,CAAxB,EAA2B;AACzB,SAAOA,EAAEC,OAAF,CAAU,OAAV,EAAmB,EAAnB,CAAP;AACD;;AAED;AACA,SAASC,cAAT,CAAwB;AACtBC,aAAW,EADW;AAEtBC,YAAU,EAFY;AAGtBC,aAAW,EAHW;AAItBC,OAJsB;AAKtBC,iBAAe;AALO,CAAxB,EAMG;AACD,QAAMC,oBAAoBL,SAASM,GAAT,CAAaC,KAAKX,eAAeW,CAAf,CAAlB,CAA1B;AACA,QAAMC,mBAAmBP,QAAQK,GAAR,CAAYG,MAAM;AACzCP,cAAUN,eAAea,EAAEP,QAAjB,CAD+B;AAEzCQ,YAAQD,EAAEC,MAAF,CAASJ,GAAT,CAAaK,KAAKf,eAAee,CAAf,CAAlB;AAFiC,GAAN,CAAZ,CAAzB;;AAKA,SAAO;AACLX,cAAUK,iBADL;AAELJ,aAASO,gBAFJ;AAGLN,cAAUN,eAAeM,QAAf,CAHL;AAILC,WAAOA,SAASS,iBAAOC,GAAP,CAAW,mBAAX,CAJX;AAKLT,kBAAcA,aAAaE,GAAb,CAAiBC,KAAKX,eAAeW,CAAf,CAAtB;AALT,GAAP;AAOD;;AAED;AACA;AACA,SAASO,gBAAT,CAA0BC,SAA1B,EAAqCf,QAArC,EAA+C;AAC7C;;;AAGA,QAAMgB,QAAQ,IAAIC,MAAJ,CAAWjB,SAASkB,MAAT,CAAgB,CAACC,IAAD,EAAOC,IAAP,KAAiB,GAAED,IAAK,QAAOC,IAAK,GAApD,EAAwD,EAAxD,CAAX,EAAwE,IAAxE,CAAd;;AAEA,SAAOL,UAAUM,MAAV,CAAiBC,KAAKC,OAAOb,MAAP,CAAcY,CAAd,EAAiBE,QAAjB,GAA4BC,KAA5B,CAAkCT,KAAlC,CAAtB,CAAP;AACD;;AAEc,MAAMU,WAAN,CAAkB;AAC/BC,cAAY,EAAEC,kBAAkB,uBAAW,iBAAX,CAApB,EAAZ,EAAiE;AAC/D,SAAKA,eAAL,GAAuBA,eAAvB;AACD;;AAEDC,gCAA8B;AAC5B,QAAI,CAAC,KAAKD,eAAL,CAAqBE,kBAArB,EAAL,EAAgD;AAC9CC,uBAAOC,KAAP,CAAa,gEAAb;AACA,YAAMC,MAAM,+BAAN,CAAN;AACD;AACF;;AAEKC,oBAAN,CAAyBlC,QAAzB,EAAmCC,OAAnC,EAA4CE,KAA5C,EAAmD;AAAA;;AAAA;AACjD,UAAIgC,WAAW,KAAf;AACA,UAAIC,eAAe,CAAnB;AACA,UAAIC,UAAU,EAAd;AACA,aAAO,CAACF,QAAR,EAAkB;AAChB;AACA,cAAMG,gBAAgB,MAAM,MAAKV,eAAL,CAAqBW,cAArB,CAAoCtC,OAApC,EAA6CE,KAA7C,EAAoDiC,YAApD,CAA5B;AACA;AACA,cAAMI,kBAAkBxC,SAASyC,MAAT,GAAkB,CAAlB,GACpB3B,iBAAiBwB,aAAjB,EAAgCtC,QAAhC,CADoB,GAEpBsC,aAFJ;AAGA;AACAD,kBAAUK,iBAAEC,OAAF,CAAUN,OAAV,EAAmBG,eAAnB,EAAoC,MAApC,CAAV;AACAJ,wBAAgB,CAAhB;AACA,YAAIE,cAAcG,MAAd,GAAuB7B,iBAAOC,GAAP,CAAW,uBAAX,CAAvB,IAA8DwB,QAAQI,MAAR,IAAkBtC,KAApF,EAA2FgC,WAAW,IAAX;AAC5F;AACD,aAAOE,OAAP;AAhBiD;AAiBlD;;AAEKO,eAAN,CAAoBC,KAApB,EAA2B;AAAA;;AAAA;AACzB,YAAM;AACJ7C,gBADI;AAEJC,eAFI;AAGJE;AAHI,UAIFJ,eAAe8C,KAAf,CAJJ;AAKA,YAAM,OAAKhB,2BAAL,EAAN;AACA,UAAI7B,YAAYA,SAASyC,MAAT,GAAkB,CAAlC,EAAqC;AACnC,eAAO,OAAKP,kBAAL,CAAwBlC,QAAxB,EAAkCC,OAAlC,EAA2CE,KAA3C,CAAP;AACD;AACD,aAAO,OAAKyB,eAAL,CAAqBW,cAArB,CAAoCtC,OAApC,EAA6CE,KAA7C,EAAoD,CAAC,CAArD,CAAP;AAVyB;AAW1B;;AAEK2C,oBAAN,CAAyBD,KAAzB,EAAgC;AAAA;;AAAA;AAC9B,YAAM;AACJ7C,gBADI;AAEJC;AAFI,UAGFF,eAAe8C,KAAf,CAHJ;AAIA,YAAM,OAAKhB,2BAAL,EAAN;AACA,UAAI7B,YAAYA,SAASyC,MAAT,GAAkB,CAAlC,EAAqC;AACnC,cAAMJ,UAAU,MAAM,OAAKH,kBAAL,CAAwBlC,QAAxB,EAAkCC,OAAlC,EAA2C,CAAC,CAA5C,CAAtB;AACA,eAAOoC,QAAQI,MAAf;AACD;AACD,aAAO,OAAKb,eAAL,CAAqBmB,uBAArB,CAA6C9C,OAA7C,CAAP;AAV8B;AAW/B;;AAEK+C,uBAAN,CAA4BH,KAA5B,EAAmC1C,KAAnC,EAA0C;AAAA;;AAAA;AACxC,YAAM,EAAED,QAAF,EAAYD,OAAZ,KAAwBF,eAAe8C,KAAf,CAA9B;AACA,YAAM,OAAKhB,2BAAL,EAAN;AACA,aAAO,OAAKD,eAAL,CAAqBqB,YAArB,CAAkC/C,QAAlC,EAA4CD,OAA5C,EAAqDE,KAArD,CAAP;AAHwC;AAIzC;;AAED;;;;;AAKM+C,gBAAN,CAAqBL,KAArB,EAA4BM,SAA5B,EAAuC;AAAA;;AAAA;AACrC,YAAM,EAAElD,OAAF,EAAWG,YAAX,KAA4BL,eAAe8C,KAAf,CAAlC;AACA,YAAM,OAAKhB,2BAAL,EAAN;AACA,YAAMuB,gBAAgB,MAAM,OAAKxB,eAAL,CAAqByB,iBAArB,CAAuC,EAAEpD,OAAF,EAAWkD,SAAX,EAAsB/C,YAAtB,EAAvC,CAA5B;;AAEA,YAAMkD,SAAS,EAAf;AACAF,oBAAcG,OAAd,CAAsB,UAACjC,CAAD,EAAO;AAC3B,YAAI,CAACgC,OAAOhC,EAAEkC,IAAT,CAAL,EAAqB;AACnBF,iBAAOhC,EAAEkC,IAAT,IAAiB,EAAjB;AACD;AACDF,eAAOhC,EAAEkC,IAAT,EAAeC,IAAf,CAAoBnC,CAApB;AACD,OALD;;AAOA,YAAMoC,cAAcnC,OAAOoC,IAAP,CAAYL,MAAZ,CAApB;;AAEA;AACA,YAAMM,2BAA2B,CAC/B,aAD+B,EAE/B,SAF+B,EAG/B,SAH+B,EAI/B,MAJ+B,EAK/B,kBAL+B,EAM/B,KAN+B,EAO/B,QAP+B,EAQ/B,uBAR+B,CAAjC;AAUAF,kBAAYG,IAAZ,CAAiB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUH,yBAAyBI,OAAzB,CAAiCD,CAAjC,CAAV;AAAA,OAAjB;;AAEA,aAAOL,YAAYpD,GAAZ,CAAgB;AAAA,eAAM,EAAEkD,MAAMlC,CAAR,EAAW2C,OAAOX,OAAOhC,CAAP,EAAUmB,MAA5B,EAAoCyB,OAAOZ,OAAOhC,CAAP,CAA3C,EAAN;AAAA,OAAhB,CAAP;AA5BqC;AA6BtC;;AAEK6C,cAAN,GAAqB;AAAA;;AAAA;AACnB,YAAM,OAAKtC,2BAAL,EAAN;AACA,aAAO;AACLuC,uBAAe,MAAM,OAAKxC,eAAL,CAAqByC,gBAArB;AADhB,OAAP;AAFmB;AAKpB;AAxG8B;kBAAZ3C,W","file":"search.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n\nimport _ from 'lodash';\nimport config from '../../../config';\nimport { isRequired } from '../lib/utils';\nimport logger from '../lib/logger';\n\n// Remove single and double quotes because these can be used to inject malicious\n// code in the RedisGraph query. (SQL injection).\nfunction sanitizeString(s) {\n  return s.replace(/['\"]/g, '');\n}\n\n// Sanitize all inputs to prevent \"sql injection\" attacks.\nfunction sanitizeInputs({\n  keywords = [],\n  filters = [],\n  property = '',\n  limit,\n  relatedKinds = [],\n}) {\n  const sanitizedKeywords = keywords.map(k => sanitizeString(k));\n  const sanitizedFilters = filters.map(f => ({\n    property: sanitizeString(f.property),\n    values: f.values.map(v => sanitizeString(v)),\n  }));\n\n  return {\n    keywords: sanitizedKeywords,\n    filters: sanitizedFilters,\n    property: sanitizeString(property),\n    limit: limit || config.get('defaultQueryLimit'),\n    relatedKinds: relatedKinds.map(k => sanitizeString(k)),\n  };\n}\n\n// TODO: Keyword filtering currently requires that we transfer a large number of records from\n// RedisGraph to filter locally. We need to investigate alternatives to improve performance.\nfunction filterByKeywords(resultSet, keywords) {\n  /* Regular expression resolves to a string like:\n   *     /(?=.*keyword1)(?=.*keyword2)(?=.*keyword3)/gi\n   * which matches if the string contains all keywords and is case insensitive. */\n  const regex = new RegExp(keywords.reduce((prev, curr) => `${prev}(?=.*${curr})`, ''), 'gi');\n\n  return resultSet.filter(r => Object.values(r).toString().match(regex));\n}\n\nexport default class SearchModel {\n  constructor({ searchConnector = isRequired('searchConnector') }) {\n    this.searchConnector = searchConnector;\n  }\n\n  checkSearchServiceAvailable() {\n    if (!this.searchConnector.isServiceAvailable()) {\n      logger.error('Unable to resolve search request because Redis is unavailable.');\n      throw Error('Search service is unavailable');\n    }\n  }\n\n  async searchQueryLimiter(keywords, filters, limit) {\n    let exitLoop = false;\n    let querySkipIdx = 0;\n    let results = [];\n    while (!exitLoop) {\n      // eslint-disable-next-line\n      const searchResults = await this.searchConnector.runSearchQuery(filters, limit, querySkipIdx);\n      // Filter results if keyword search - otherwise its a label search\n      const filteredResults = keywords.length > 0\n        ? filterByKeywords(searchResults, keywords)\n        : searchResults;\n      // concatenate search results each iteration removing any duplicates\n      results = _.unionBy(results, filteredResults, '_uid');\n      querySkipIdx += 1;\n      if (searchResults.length < config.get('defaultQueryLoopLimit') || results.length >= limit) exitLoop = true;\n    }\n    return results;\n  }\n\n  async resolveSearch(input) {\n    const {\n      keywords,\n      filters,\n      limit,\n    } = sanitizeInputs(input);\n    await this.checkSearchServiceAvailable();\n    if (keywords && keywords.length > 0) {\n      return this.searchQueryLimiter(keywords, filters, limit);\n    }\n    return this.searchConnector.runSearchQuery(filters, limit, -1);\n  }\n\n  async resolveSearchCount(input) {\n    const {\n      keywords,\n      filters,\n    } = sanitizeInputs(input);\n    await this.checkSearchServiceAvailable();\n    if (keywords && keywords.length > 0) {\n      const results = await this.searchQueryLimiter(keywords, filters, -1);\n      return results.length;\n    }\n    return this.searchConnector.runSearchQueryCountOnly(filters);\n  }\n\n  async resolveSearchComplete(input, limit) {\n    const { property, filters } = sanitizeInputs(input);\n    await this.checkSearchServiceAvailable();\n    return this.searchConnector.getAllValues(property, filters, limit);\n  }\n\n  /** Resolve the related items for a given search query.\n   *\n   * @param {*} parent\n   * returns { kind: String, count: Int, items: [] }\n   */\n  async resolveRelated(input, countOnly) {\n    const { filters, relatedKinds } = sanitizeInputs(input);\n    await this.checkSearchServiceAvailable();\n    const relationships = await this.searchConnector.findRelationships({ filters, countOnly, relatedKinds });\n\n    const result = {};\n    relationships.forEach((r) => {\n      if (!result[r.kind]) {\n        result[r.kind] = [];\n      }\n      result[r.kind].push(r);\n    });\n\n    const resultKinds = Object.keys(result);\n\n    // TODO: Need a better prioritization algorithm.\n    const prioritizedRelationships = [\n      'application',\n      'cluster',\n      'release',\n      'node',\n      'persistentvolume',\n      'pod',\n      'secret',\n      'persistentvolumeclaim',\n    ];\n    resultKinds.sort((a, b) => prioritizedRelationships.indexOf(b));\n\n    return resultKinds.map(r => ({ kind: r, count: result[r].length, items: result[r] }));\n  }\n\n  async searchSchema() {\n    await this.checkSearchServiceAvailable();\n    return {\n      allProperties: await this.searchConnector.getAllProperties(),\n    };\n  }\n}\n"]}