{"version":3,"sources":["../../../src/v2/schema/search.js"],"names":["typeDef","resolver","Query","search","parent","input","searchComplete","property","query","limit","searchModel","resolveSearchComplete","filters","lodash","get","searchSchema","args","SearchResult","count","resolveSearchCount","items","resolveSearch","related","info","selections","map","s","countOnly","includes","logger","warn","resolveRelated"],"mappings":";;;;;;;AAQA;;;;AACA;;;;;;AATA;;;;;;;;AAWO,MAAMA,4BAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAjB;;AA6BA,MAAMC,8BAAW;AACtBC,SAAO;AACLC,YAAQ,CAACC,MAAD,EAAS,EAAEC,KAAF,EAAT,KAAuBA,KAD1B;AAELC,oBAAgB,CAACF,MAAD,EAAS,EAAEG,QAAF,EAAYC,QAAQ,EAApB,EAAwBC,KAAxB,EAAT,EAA0C,EAAEC,WAAF,EAA1C,KACdA,YAAYC,qBAAZ,CAAkC,EAAEJ,QAAF,EAAYK,SAASC,iBAAOC,GAAP,CAAWN,KAAX,EAAkB,SAAlB,EAA6B,EAA7B,CAArB,EAAlC,EAA2FC,KAA3F,CAHG;AAILM,kBAAc,CAACX,MAAD,EAASY,IAAT,EAAe,EAAEN,WAAF,EAAf,KAAmCA,YAAYK,YAAZ;AAJ5C,GADe;AAOtBE,gBAAc;AACZC,WAAO,CAACd,MAAD,EAASY,IAAT,EAAe,EAAEN,WAAF,EAAf,KAAmCA,YAAYS,kBAAZ,CAA+Bf,MAA/B,CAD9B;AAEZgB,WAAO,CAAChB,MAAD,EAASY,IAAT,EAAe,EAAEN,WAAF,EAAf,KAAmCA,YAAYW,aAAZ,CAA0BjB,MAA1B,CAF9B;AAGZkB,aAAS,CAAClB,MAAD,EAASY,IAAT,EAAe,EAAEN,WAAF,EAAf,EAAgCa,IAAhC,KAAyC;AAChD,YAAMC,aAAaX,iBAAOC,GAAP,CAAWS,IAAX,EAAiB,uCAAjB,EAA0D,EAA1D,EAChBE,GADgB,CACZC,KAAKb,iBAAOC,GAAP,CAAWY,CAAX,EAAc,YAAd,EAA4B,EAA5B,CADO,CAAnB;AAEA,YAAMC,YAAYH,WAAWI,QAAX,CAAoB,OAApB,KAAgC,CAACJ,WAAWI,QAAX,CAAoB,OAApB,CAAnD;AACA,UAAIJ,WAAWI,QAAX,CAAoB,OAApB,KAAgCJ,WAAWI,QAAX,CAAoB,OAApB,CAApC,EAAkE;AAChE;AACAC,yBAAOC,IAAP,CAAY,yJAAZ;AACD;AACD,aAAOpB,YAAYqB,cAAZ,CAA2B3B,MAA3B,EAAmCuB,SAAnC,CAAP;AACD;AAZW;AAPQ,CAAjB","file":"search.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\nimport lodash from 'lodash';\nimport logger from '../lib/logger';\n\nexport const typeDef = `\n  input SearchFilter {\n    property: String!\n    values: [String]\n  }\n\n  input SearchInput {\n    keywords: [String]\n    filters: [SearchFilter]\n    # Max number of results. Default limit: 10,000. For unlimited results use -1.\n    limit: Int\n    # Filter relationships to the specified kinds.\n    # If empty, all relationships will be included. This filter is used with the 'related' field on SearchResult.\n    relatedKinds: [String]\n  }\n\n  type SearchResult {\n    count: Int\n    items: JSON\n    related: [SearchRelatedResult]\n  }\n\n  type SearchRelatedResult {\n    kind: String!\n    count: Int\n    items: JSON\n  }\n`;\n\nexport const resolver = {\n  Query: {\n    search: (parent, { input }) => input,\n    searchComplete: (parent, { property, query = {}, limit }, { searchModel }) =>\n      searchModel.resolveSearchComplete({ property, filters: lodash.get(query, 'filters', []) }, limit),\n    searchSchema: (parent, args, { searchModel }) => searchModel.searchSchema(),\n  },\n  SearchResult: {\n    count: (parent, args, { searchModel }) => searchModel.resolveSearchCount(parent),\n    items: (parent, args, { searchModel }) => searchModel.resolveSearch(parent),\n    related: (parent, args, { searchModel }, info) => {\n      const selections = lodash.get(info, 'fieldNodes[0].selectionSet.selections', [])\n        .map(s => lodash.get(s, 'name.value', []));\n      const countOnly = selections.includes('count') && !selections.includes('items');\n      if (selections.includes('count') && selections.includes('items')) {\n        // eslint-disable-next-line max-len\n        logger.warn('Client requested related items and count in the same query. When both are needed clients should get the count from items.length for better performance.');\n      }\n      return searchModel.resolveRelated(parent, countOnly);\n    },\n  },\n};\n"]}