{"version":3,"sources":["../src/index.js"],"names":["logger","log4js","getLogger","log4jsConfig","process","env","LOG4JS_CONFIG","JSON","parse","undefined","configure","VCS_REF","info","GRAPHQL_PORT","PORT","config","get","CONTEXT_PATH","graphQLServer","require","default","privateKey","fs","readFileSync","serverKey","certificate","serverCert","credentials","key","cert","server","https","createServer","listen","pid","NODE_ENV"],"mappings":";;AASA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAZA;;;;;;;;;AAcA,MAAMA,SAASC,iBAAOC,SAAP,CAAiB,QAAjB,CAAf;;AAEA,MAAMC,eAAeC,QAAQC,GAAR,CAAYC,aAAZ,GAA4BC,KAAKC,KAAL,CAAWJ,QAAQC,GAAR,CAAYC,aAAvB,CAA5B,GAAoEG,SAAzF;AACAR,iBAAOS,SAAP,CAAiBP,gBAAgB,oBAAjC;;AAEA,IAAIC,QAAQC,GAAR,CAAYM,OAAhB,EAAyB;AACvBX,SAAOY,IAAP,CAAY,yBAAZ,EAAuCR,QAAQC,GAAR,CAAYM,OAAnD;AACD;;AAED,MAAME,eAAeT,QAAQC,GAAR,CAAYS,IAAZ,IAAoBC,iBAAOC,GAAP,CAAW,UAAX,CAApB,IAA8C,IAAnE;AACA,MAAMC,eAAeF,iBAAOC,GAAP,CAAW,aAAX,CAArB;;AAEA,MAAME,gBAAgBC,QAAQ,MAAR,EAAgBC,OAAtC;;AAEA,MAAMC,aAAaC,aAAGC,YAAH,CAAgBnB,QAAQC,GAAR,CAAYmB,SAAZ,IAAyB,yBAAzC,EAAoE,MAApE,CAAnB;AACA,MAAMC,cAAcH,aAAGC,YAAH,CAAgBnB,QAAQC,GAAR,CAAYqB,UAAZ,IAA0B,yBAA1C,EAAqE,MAArE,CAApB;AACA,MAAMC,cAAc,EAAEC,KAAKP,UAAP,EAAmBQ,MAAMJ,WAAzB,EAApB;;AAEA,MAAMK,SAASC,gBAAMC,YAAN,CAAmBL,WAAnB,EAAgCT,aAAhC,CAAf;;AAEAY,OAAOG,MAAP,CAAcpB,YAAd,EAA4B,MAAM;AAChCb,SAAOY,IAAP,CAAa,QAAOR,QAAQ8B,GAAI,UAAS9B,QAAQC,GAAR,CAAY8B,QAAS,yBAA9D;AACAnC,SAAOY,IAAP,CAAa,kDAAiDC,YAAa,GAAEI,YAAa,UAA1F;AACA,MAAIb,QAAQC,GAAR,CAAY8B,QAAZ,KAAyB,YAA7B,EAA2C;AACzCnC,WAAOY,IAAP,CAAa,gDAA+CC,YAAa,GAAEI,YAAa,WAAxF;AACD;AACF,CAND","file":"index.js","sourcesContent":["/** *****************************************************************************\n * Licensed Materials - Property of IBM\n * (c) Copyright IBM Corporation 2019. All Rights Reserved.\n *\n * Note to U.S. Government Users Restricted Rights:\n * Use, duplication or disclosure restricted by GSA ADP Schedule\n * Contract with IBM Corp.\n ****************************************************************************** */\n\nimport https from 'https';\nimport fs from 'fs';\nimport log4js from 'log4js';\nimport config from '../config';\n\nconst logger = log4js.getLogger('server');\n\nconst log4jsConfig = process.env.LOG4JS_CONFIG ? JSON.parse(process.env.LOG4JS_CONFIG) : undefined;\nlog4js.configure(log4jsConfig || 'config/log4js.json');\n\nif (process.env.VCS_REF) {\n  logger.info('Built from git commit: ', process.env.VCS_REF);\n}\n\nconst GRAPHQL_PORT = process.env.PORT || config.get('httpPort') || 4010;\nconst CONTEXT_PATH = config.get('contextPath');\n\nconst graphQLServer = require('./v2').default;\n\nconst privateKey = fs.readFileSync(process.env.serverKey || './sslcert/searchapi.key', 'utf8');\nconst certificate = fs.readFileSync(process.env.serverCert || './sslcert/searchapi.crt', 'utf8');\nconst credentials = { key: privateKey, cert: certificate };\n\nconst server = https.createServer(credentials, graphQLServer);\n\nserver.listen(GRAPHQL_PORT, () => {\n  logger.info(`[pid ${process.pid}] [env ${process.env.NODE_ENV}] [version V2] started.`);\n  logger.info(`Search API is now running on https://localhost:${GRAPHQL_PORT}${CONTEXT_PATH}/graphql`);\n  if (process.env.NODE_ENV !== 'production') {\n    logger.info(`GraphiQL is now running on https://localhost:${GRAPHQL_PORT}${CONTEXT_PATH}/graphiql`);\n  }\n});\n"]}